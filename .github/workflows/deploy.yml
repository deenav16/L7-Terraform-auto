name: Deploy and Monitor VMs

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Generate SSH Key Pair
        run: |
          mkdir -p ~/.ssh
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
          SSH_PUBLIC_KEY=$(cat ~/.ssh/id_rsa.pub)
          echo "TF_VAR_ssh_public_key=${SSH_PUBLIC_KEY}" >> "$GITHUB_ENV"

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check and Create Terraform Backend Resources
        run: |
          RG_EXISTS=$(az group exists --name "tfstate-rg")
          if [ "$RG_EXISTS" = "false" ]; then
            echo "Creating resource group tfstate-rg..."
            az group create --name tfstate-rg --location "East US"
          else
            echo "Resource group tfstate-rg already exists."
          fi

          EXISTING_STORAGE=$(az storage account list --resource-group tfstate-rg --query "[?starts_with(name, 'tfstate')].name" -o tsv | head -n 1)
          if [ -n "$EXISTING_STORAGE" ]; then
            echo "Using existing storage account: $EXISTING_STORAGE"
            STORAGE_ACCOUNT=$EXISTING_STORAGE
          else
            RANDOM_ID=$(date +%s)
            STORAGE_ACCOUNT="tfstate${RANDOM_ID}"
            echo "Creating new storage account: $STORAGE_ACCOUNT"
            az storage account create --name $STORAGE_ACCOUNT --resource-group tfstate-rg --location "East US" --sku Standard_LRS --encryption-services blob
          fi

          CONTAINER_EXISTS=$(az storage container exists --name tfstate --account-name $STORAGE_ACCOUNT --auth-mode login --query "exists" -o tsv || echo "false")
          if [ "$CONTAINER_EXISTS" = "false" ]; then
            echo "Creating storage container..."
            az storage container create --name tfstate --account-name $STORAGE_ACCOUNT --auth-mode login
          else
            echo "Storage container already exists."
          fi

          echo "STORAGE_ACCOUNT=$STORAGE_ACCOUNT" >> $GITHUB_ENV

      - name: Terraform Init
        working-directory: ./terraform
        run: |
          SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .subscriptionId)
          TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .tenantId)
          CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientId)
          CLIENT_SECRET=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientSecret)

          terraform init \
            -backend-config="resource_group_name=tfstate-rg" \
            -backend-config="storage_account_name=${{ env.STORAGE_ACCOUNT }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="subscription_id=${SUBSCRIPTION_ID}" \
            -backend-config="tenant_id=${TENANT_ID}" \
            -backend-config="client_id=${CLIENT_ID}" \
            -backend-config="client_secret=${CLIENT_SECRET}"

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -out=tfplan
        env:
          TF_VAR_subscription_id: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
          TF_VAR_client_id: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          TF_VAR_client_secret: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
          TF_VAR_tenant_id: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}

      - name: Terraform Apply
        working-directory: ./terraform
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan
